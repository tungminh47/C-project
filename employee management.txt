#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <string>
#include <iomanip>

using namespace std;

const string ADMIN_FILE = "Administrators.txt";
const string EMPLOYEE_FILE = "Employees.txt";

struct Employee {
    string username;
    string password;
    string fullname;
    string address;
    string phone;
    string email;
};


void readData(const string& filename, vector<string>& data) {
    data.clear();
    ifstream file(filename);
    if (file.is_open()) {
        string line;
        while (getline(file, line)) {
            data.push_back(line);
        }
        file.close();
    }
}


void writeData(const string& filename, const vector<string>& data) {
    ofstream file(filename);
    if (file.is_open()) {
        for (const string& line : data) {
            file << line << endl;
        }
        file.close();
    }
}


bool usernameExists(const string& filename, const string& username) {
    vector<string> data;
    readData(filename, data);
    for (const string& line : data) {
        stringstream ss(line);
        string uname;
        getline(ss, uname, ',');
        if (uname == username) {
            return true;
        }
    }
    return false;
}


bool login(const string& filename, const string& username, const string& password) {
    vector<string> data;
    readData(filename, data);
    for (const string& line : data) {
        stringstream ss(line);
        string uname, pass;
        getline(ss, uname, ',');
        getline(ss, pass, ',');
        if (uname == username && pass == password) {
            return true;
        }
    }
    return false;
}


void addEmployee() {
    Employee emp;
    cout << "Enter username: ";
    cin >> emp.username;
    if (usernameExists(EMPLOYEE_FILE, emp.username)) {
        cout << "Username already exists. Cannot add employee." << endl;
        return;
    }
    cout << "Enter fullname: ";
    cin.ignore();
    getline(cin, emp.fullname);
    emp.password = "111111"; 
    cout << "Enter address: ";
    getline(cin, emp.address);
    cout << "Enter phone: ";
    getline(cin, emp.phone);
    cout << "Enter email: ";
    getline(cin, emp.email);

    // Ghi vÃ o Employees.txt
    ofstream empFile(EMPLOYEE_FILE, ios::app);
    if (empFile.is_open()) {
        empFile << emp.username << "," << emp.password << endl;
        empFile.close();
    } else {
        cerr << "Error: Unable to open Employees.txt for writing." << endl;
        return;
    }

   
    string userFile = emp.username + ".txt";
    ofstream userInfoFile(userFile);
    if (userInfoFile.is_open()) {
        userInfoFile << emp.fullname << endl;
        userInfoFile << emp.address << endl;
        userInfoFile << emp.phone << endl;
        userInfoFile << emp.email << endl;
        userInfoFile.close();
        cout << "Employee added successfully." << endl;
    } else {
        cerr << "Error: Unable to create " << userFile << " for writing." << endl;
        
    }
}


void deleteEmployee() {
    string username;
    cout << "Enter username of employee to delete: ";
    cin >> username;

    vector<string> newData;
    ifstream file(EMPLOYEE_FILE);
    if (file.is_open()) {
        string line;
        while (getline(file, line)) {
            stringstream ss(line);
            string uname;
            getline(ss, uname, ',');
            if (uname != username) {
                newData.push_back(line);
            }
        }
        file.close();
    }

    if (newData.size() == 0) {
        cerr << "Error: Employee not found." << endl;
        return;
    }

  
    writeData(EMPLOYEE_FILE, newData);

   
    string userFile = username + ".txt";
    if (remove(userFile.c_str()) != 0) {
        cerr << "Error: Unable to delete " << userFile << "." << endl;
    } else {
        cout << "Employee deleted successfully." << endl;
    }
}


void displayEmployeeInfo(const string& username) {
    string userFile = username + ".txt";
    ifstream file(userFile);
    if (file.is_open()) {
        string line;
        cout << "Employee information:" << endl;
        while (getline(file, line)) {
            cout << line << endl;
        }
        file.close();
    } else {
        cerr << "Error: Unable to open " << userFile << " for reading." << endl;
    }
}


void updateEmployeeInfo(const string& username) {
    string userFile = username + ".txt";
    ifstream file(userFile);
    if (!file.is_open()) {
        cerr << "Error: Unable to open " << userFile << " for reading." << endl;
        return;
    }
    file.close();

    string fullname, address, phone, email;
    cout << "Enter new fullname (leave blank to keep current): ";
    cin.ignore();
    getline(cin, fullname);
    cout << "Enter new address (leave blank to keep current): ";
    getline(cin, address);
    cout << "Enter new phone (leave blank to keep current): ";
    getline(cin, phone);
    cout << "Enter new email (leave blank to keep current): ";
    getline(cin, email);


    string oldFullname, oldAddress, oldPhone, oldEmail;
    ifstream oldFile(userFile);
    if (oldFile.is_open()) {
        getline(oldFile, oldFullname);
        getline(oldFile, oldAddress);
        getline(oldFile, oldPhone);
        getline(oldFile, oldEmail);
        oldFile.close();
    } else {
        cerr << "Error: Unable to open " << userFile << " for reading." << endl;
        return;
    }


    if (!fullname.empty()) oldFullname = fullname;
    if (!address.empty()) oldAddress = address;
    if (!phone.empty()) oldPhone = phone;
    if (!email.empty()) oldEmail = email;

    
    ofstream newFile(userFile);
    if (newFile.is_open()) {
        newFile << oldFullname << endl;
        newFile << oldAddress << endl;
        newFile << oldPhone << endl;
        newFile << oldEmail << endl;
        newFile.close();
        cout << "Employee information updated successfully." << endl;
    } else {
        cerr << "Error: Unable to open " << userFile << " for writing." << endl;
    }
}


void displayAllEmployees() {
    vector<string> employees;
    readData(EMPLOYEE_FILE, employees);
    cout << "List of all employees:" << endl;
    for (const string& emp : employees) {
        cout << emp << endl;
    }
}


void adminMenu() {
    char choice;
    do {
        cout << "* * * * * * * * * * * * * * * * * * * * *" << endl;
        cout << "* ADMIN MENU *" << endl;
        cout << "* * * * * * * * * * * * * * * * * * * * *" << endl;
        cout << "a. Add new employee" << endl;
        cout << "b. Delete employee" << endl;
        cout << "c. Find and display employee information" << endl;
        cout << "d. Update employee information" << endl;
        cout << "e. Display all employees" << endl;
        cout << "f. Exit" << endl;
        cout << "Enter your choice: ";
        cin >> choice;
        switch (choice) {
            case 'a':
                addEmployee();
                break;
            case 'b':
                deleteEmployee();
                break;
            case 'c': {
                string username;
                cout << "Enter username of employee: ";
                cin >> username;
                displayEmployeeInfo(username);
                break;
            }
            case 'd': {
                string username;
                cout << "Enter username of employee: ";
                cin >> username;
                updateEmployeeInfo(username);
                break;
            }
            case 'e':
                displayAllEmployees();
                break;
            case 'f':
                cout << "Exiting Admin menu." << endl;
                break;
            default:
                cerr << "Invalid choice. Please try again." << endl;
        }
    } while (choice != 'f');
}


void employeeMenu(const string& username) {
    char choice;
    bool isFirstLogin = true;
    do {
        cout << "* * * * * * * * * * * * * * * * * * * * *" << endl;
        cout << "* EMPLOYEE MENU *" << endl;
        cout << "* * * * * * * * * * * * * * * * * * * * *" << endl;
        cout << "1. Display your information" << endl;
        cout << "2. Change password" << endl;
        cout << "3. Exit" << endl;
        cout << "Enter your choice: ";
        cin >> choice;
        switch (choice) {
            case '1':
                displayEmployeeInfo(username);
                break;
            case '2':
                if (isFirstLogin) {
                    cout << "You must change your password before continuing." << endl;
                    isFirstLogin = false;
                }
                changePassword(username);
                break;
            case '3':
                cout << "Exiting Employee menu." << endl;
                break;
            default:
                cerr << "Invalid choice. Please try again." << endl;
        }
    } while (choice != '3');
}


void changePassword(const string& username) {
    string oldPassword, newPassword, confirmNewPassword;
    cout << "Enter your current password: ";
    cin >> oldPassword;

   
    if (!login(EMPLOYEE_FILE, username, oldPassword)) {
        cerr << "Error: Incorrect password. Unable to change password." << endl;
        return;
    }

    cout << "Enter your new password: ";
    cin >> newPassword;
    cout << "Confirm your new password: ";
    cin >> confirmNewPassword;

  
    if (newPassword != confirmNewPassword) {
        cerr << "Error: New password and confirm password do not match. Unable to change password." << endl;
        return;
    }

   
    vector<string> newData;
    readData(EMPLOYEE_FILE, newData);
    for (string& line : newData) {
        size_t pos = line.find(username + ",");
        if (pos != string::npos) {
            line = username + "," + newPassword;
            break;
        }
    }
    writeData(EMPLOYEE_FILE, newData);

    cout << "Password changed successfully." << endl;
}

int main() {
    char userType;
    cout << "Are you an admin (a) or an employee (e)? ";
    cin >> userType;

    if (userType == 'a') {
        string username, password;
        cout << "Enter your username: ";
        cin >> username;
        cout << "Enter your password: ";
        cin >> password;

        
        if (!login(ADMIN_FILE, username, password)) {
            cerr << "Error: Incorrect username or password. Exiting program." << endl;
            return 1;
        }

       
        cout << "Logged in as Admin." << endl;
        adminMenu();

    } else if (userType == 'e') {
        string username, password;
        cout << "Enter your username: ";
        cin >> username;
        cout << "Enter your password: ";
        cin >> password;

        
        if (!login(EMPLOYEE_FILE, username, password)) {
            cerr << "Error: Incorrect username or password. Exiting program." << endl;
            return 1;
        }

        
        cout << "Logged in as Employee." << endl;
        employeeMenu(username);

    } else {
        cerr << "Invalid user type. Exiting program." << endl;
        return 1;
    }

    return 0;
}